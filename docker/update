#!/usr/bin/env bash

APP_CONTAINER=$(sudo docker ps -a -q --filter="name=laravelapp")
QUEUE_CONTAINER=$(sudo docker ps -a -q --filter="name=horizon")
DB_CONTAINER=$(sudo docker ps -a -q --filter="name=db")

NEW_APP_CONTAINER_STAMP="laravelapp`date +"%s"`"
NEW_QUEUE_CONTAINER_STAMP="horizon`date +"%s"`"

sudo docker pull fwartner/laravelapp

RUNNING_IMAGE=$(docker inspect $APP_CONTAINER | jq ".[0].Image")
CURRENT_IMAGE=$(docker image inspect fwartner/laravelapp:latest | jq ".[0].Id")

if [ "$CURRENT_IMAGE" == "$RUNNING_IMAGE" ]; then
    echo ">>> Most recent image is already in use"
    exit 0
fi

sudo docker stop $QUEUE_CONTAINER
sudo docker rm -v $QUEUE_CONTAINER
echo "Removed old queue container $QUEUE_CONTAINER"

NEW_APP_CONTAINER=$(sudo docker run -d --network=appsmind -e CONTAINER_ENV=production --restart=always --name="$NEW_APP_CONTAINER_STAMP" fwartner/laravelapp)
NEW_QUEUE_CONTAINER=$(sudo docker run -d --network=appsmind --name="$NEW_QUEUE_CONTAINER_STAMP" -e CONTAINER_ENV=production --restart=always -w /var/www/html fwartner/laravelapp php artisan horizon)

sleep 5

echo "Started new container $NEW_APP_CONTAINER_STAMP"

sudo sed -i "s/server laravelapp.*/server $NEW_APP_CONTAINER_STAMP:80;/" /opt/conf.d/default.conf

sudo docker exec -it nginx nginx -t
NGINX_STABLE=$?

if [ $NGINX_STABLE -eq 0 ]; then
    sudo docker kill -s HUP nginx

    sudo docker stop $APP_CONTAINER
    sudo docker rm -v $APP_CONTAINER
    echo "Removed old app container $APP_CONTAINER"

    DANGLING_IMAGES=$(sudo docker image ls -f "dangling=true" -q)
    if [ ! -z "$DANGLING_IMAGES" ]; then
        sudo docker image rm $(sudo docker image ls -f "dangling=true" -q)
    fi

    echo "New container: " $NEW_APP_CONTAINER_STAMP

    docker exec -it $NEW_APP_CONTAINER_STAMP sh -c "cd /var/www/html && php artisan migrate --force"

else
    echo "ERROR: Nginx configuration test failed!"
    exit 1
fi